---
const { lang, currentPath = "" } = Astro.props;

// Idiomas disponÃ­veis (pode adicionar quantos idimoas quiser)
const supportedLangs: Record<string, string> = {
  pt: "ðŸ‡§ðŸ‡· PortuguÃªs",
  en: "ðŸ‡¬ðŸ‡§ English",
};

const langKeys = Object.keys(supportedLangs);
const otherLangs = langKeys.filter(key => key !== lang);
const needsDropdown = langKeys.length > 2;

const generateUrl = (targetLang: string) =>
  currentPath.startsWith(`/${lang}`)
    ? currentPath.replace(`/${lang}`, `/${targetLang}`)
    : `/${targetLang}${currentPath}`;
---
{needsDropdown ? (
  <div class="relative inline-block text-left group">
    <button class="inline-flex items-center justify-center w-full px-4 py-2 bg-gray-200 rounded-md text-sm font-medium hover:bg-gray-300 transition">
      {supportedLangs[lang]} <span class="ml-1">â–¼</span>
    </button>
    <div
      class="absolute z-10 mt-2 w-48 rounded-md shadow-lg bg-white border border-gray-200 opacity-0 group-hover:opacity-100 group-hover:visible transition-opacity duration-400"
    >
      {otherLangs.map((code) => (
        <a
          href={generateUrl(code)}
          class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition"
        >
          {supportedLangs[code]}
        </a>
      ))}
    </div>
  </div>
) : (
<a
  href={generateUrl(otherLangs[0])}
  class="inline-flex items-center justify-center px-4 py-2 bg-gray-200 rounded-md text-sm hover:bg-gray-300 transition"
>
  {supportedLangs[otherLangs[0]]} <span class="ml-1">â‡„</span>
</a>
)}
